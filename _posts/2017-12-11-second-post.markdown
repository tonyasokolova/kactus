---
title:  "Основные проблемы безопасности при использовании ReactJS"
date:   2017-12-11 16:20:00
description: В данной статье рассмотрены основные уязвимости, которые могут совершать разработчики при создании React-приложений, а также уязвимости типа “CSS injection” в CSS-in-JS библиотеках и способы их эксплуатации.
---

React — популярная javascript-библиотека для создания UI.

В данной статье рассмотрим основные уязвимости, которые могут совершать разработчики при создании React-приложений. В React реализована защита по умолчанию от уязвимостей типа HTML-injection, так что разработчики зачастую “забывают” о других возможностях проведения XSS-атак. Также рассмотрим уязвимости типа “CSS injection” в CSS-in-JS библиотеках и способы их эксплуатации. 

### Компоненты, свойства и элементы

Компоненты позволяют разделить UI на независимые, повторно используемые части и работать с каждой из них отдельно.

Концептуально, компоненты подобны JavaScript функциям. Они принимают произвольные данные (называемые “props”) и возвращают React-элементы, описывающие что должно появиться на экране. Базовый компонент выглядит следующим образом:

{% highlight react %}
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
{% endhighlight %}

Обратите внимание на синтаксис в операторе return: это _**JSX**_, расширение синтаксиса JavaScript, разработанное командой ReactJS. Этот формат используется для упрощения написания компонентов ReactJS. На этапе сборки-препроцессинга JSX транслируется в обычный JavaScript код. Следующие два примера идентичны: 

{% highlight react %}
// JSX 

const element = (
  <h1 className="greeting">
  Hello, world!
  </h1>
);

// Transpliled to createElement() call 

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);
{% endhighlight %}

Новые элементы создаются с помощью функции createElement():

{% highlight react %}
React.createElement(
  type,
  [props],
  [...children]
)
{% endhighlight %}
